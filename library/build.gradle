import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        sourceSets.main {
            jni.srcDirs = [] //disable auto ndk-build
            jniLibs.srcDir 'src/main/libs'

        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'io.reactivex:rxjava:1.1.3'
    compile 'com.android.support:support-annotations:23.3.0'
    compile 'com.google.code.findbugs:annotations:2.0.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.5-beta'
    testCompile ('org.powermock:powermock-api-mockito:1.6.2') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testCompile ('org.powermock:powermock-module-junit4:1.6.2') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
}

publish {
    groupId = 'com.github.andriydruk'
    artifactId = 'rxdnssd'
    publishVersion = '0.7.0'
    desc = 'Android library which is Rx wrapper for Apple DNSSD Java API'
    licences = ['Apache-2.0']
    website = 'https://github.com/andriydruk/RxDNSSD'
}

//Add PMD checks
plugins.apply('pmd')
pmd {
    toolVersion = '5.4.0'
}
task pmd(type: Pmd) {
    ignoreFailures = false // Fail early.
    ruleSetFiles = files("${buildscript.sourceFile.parent}/pmd.xml")
    ruleSets = []
    source = fileTree('src/main/java/com/github')
}

//Add findbugs
plugins.apply('findbugs')
task findbugs(type: FindBugs) {
    ignoreFailures = false // Fail early.
    effort = 'max'
    reportLevel = 'low' // Report even low priority problems.
    reports {
        xml {
            enabled = false
        }
        html {
            enabled = true
        }
    }
    classes = files("${project.projectDir}/build/intermediates/classes/debug/com/github")
    source = fileTree('src/main/java/com/github')
    classpath = files()
    excludeFilter = file("${buildscript.sourceFile.parent}/findbugs-filter.xml")
}

//Add checkstyle checks
plugins.apply('checkstyle')
checkstyle {
    toolVersion = '6.15'
}
task checkstyle(type: Checkstyle) {
    configFile file("${buildscript.sourceFile.parent}/checkstyle.xml")
    ignoreFailures = false // Fail early.
    showViolations false
    source 'src/main/java/com/github'
    include '**/*.java'
    reports {
        html.enabled = true
    }
    classpath = files()
}

def getNdkCommand() {
    def ndk_command_path
    def local_properties = project.rootProject.file('local.properties')
    if (local_properties.exists()) {
        Properties properties = new Properties()
        properties.load(local_properties.newDataInputStream())
        ndk_command_path = properties.getProperty('ndk.dir')
    }

    def ndk_command
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        ndk_command = 'ndk-build.cmd'
    } else {
        ndk_command = 'ndk-build'
    }

    def ndk_full_command
    if (ndk_command_path) {
        ndk_full_command = sprintf("%s%s%s", ndk_command_path, File.separator, ndk_command)
    } else {
        ndk_full_command = ndk_command
    }

    return ndk_full_command
}

task ndkBuild(type: Exec) {
    commandLine getNdkCommand(),
        'NDK_LIBS_OUT=libs',
        '-C', file('src/main').absolutePath
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}

task cleanNdkBuild(type: Exec) {
    commandLine getNdkCommand(),
        'NDK_LIBS_OUT=libs',
        '-C', file('src/main').absolutePath,
        'clean'
}

clean.dependsOn 'cleanNdkBuild'

check.doLast {
    project.tasks.getByName("pmd").execute()
    project.tasks.getByName("findbugs").execute()
    project.tasks.getByName("checkstyle").execute()
}
